# DevOps Test Project

## Summary

This project demonstrates my ability to provision and secure a Linux server, set up Traefik as a reverse proxy with Let's Encrypt certificates, deploy Jenkins as a CI tool, and implement a full CI/CD pipeline using both Jenkins and Azure DevOps. It includes secure credential management, container builds, and automated deployment of a static NGINX site from a public GitHub repository.

---

## Reproduce Environment (Step-by-Step)

### 1. Provision and Harden a Linux Server

* Use Azure Portal to create an Ubuntu 22.04 x64 VM.
* Create a new non-root user with sudo access:

  ```bash
  adduser devopsadmin
  usermod -aG sudo devopsadmin
  ```
* Disable root login via SSH:

  ```bash
  sudo nano /etc/ssh/sshd_config
  # Set: PermitRootLogin no
  sudo systemctl restart sshd
  ```
* Set up firewall with UFW:

  ```bash
  sudo ufw allow OpenSSH
  sudo ufw allow 80,443,8080/tcp
  sudo ufw enable
  ```
* Install Docker & Docker Compose:

  ```bash
  sudo apt update && sudo apt install -y docker.io docker-compose
  sudo usermod -aG docker $USER && newgrp docker
  ```
* Reference script: [server-setup.sh](https://github.com/sirpaulx/GEMS-TEST/blob/main/1-server-setup/server-setup.sh)

### 2. Set Up Traefik and Dummy Services

* Clone the repo:

  ```bash
  git clone https://github.com/sirpaulx/GEMS-TEST.git
  cd GEMS-TEST/2-traefik-setup
  ```
* Prepare and launch services:

  ```bash
  touch traefik/acme.json && chmod 600 traefik/acme.json
  docker-compose up -d
  ```
* Includes:

  * HTTPS via Let's Encrypt (staging)
  * HTTP Basic Auth on one dummy service
  * Secure Traefik Dashboard via Traefik middleware
* Config files:

  * [docker-compose.yml](https://github.com/sirpaulx/GEMS-TEST/blob/main/2-traefik-setup/docker-compose.yml)
  * [traefik.yml](https://github.com/sirpaulx/GEMS-TEST/blob/main/2-traefik-setup/traefik/traefik.yml)

### 3. Jenkins CI Setup

* Jenkins deployed via Docker behind Traefik with HTTPS
* Custom Jenkins Dockerfile enabled Docker-in-Docker
* Jenkinsfile:

  * Builds and tags Docker image from [radio app](https://github.com/sirpaulx/GEMS-TEST)
  * Pushes image to Docker Hub
  * Uses Jenkins Credentials Manager for authentication
* Config files:

  * [docker-compose.yml](https://github.com/sirpaulx/GEMS-TEST/blob/main/3-jenkins-ci/docker-compose.yml)
  * [Jenkinsfile](https://github.com/sirpaulx/GEMS-TEST/blob/main/3-jenkins-ci/Jenkinsfile)

### 4. Azure DevOps Pipeline

* Uses same GitHub repo and radio app as Jenkins
* Self-hosted agent configured on ARM64 Azure VM:

  * Dependencies installed:

    ```bash
    sudo apt install libcurl4 libicu70 libkrb5-3
    ```
  * Correct ARM64 agent binary downloaded
* Pipeline:

  * Lints/tests NGINX app
  * Builds Docker image
  * Pushes to Docker Hub

### 5. Deploy the App

* Deployment triggered via Jenkins pipeline
* Script uses `docker-compose` to pull and redeploy latest image
* HTTPS routing handled by Traefik
* Script:

  * [deploy-radio.sh](https://github.com/sirpaulx/GEMS-TEST/blob/main/5-app-deployment/deploy-radio.sh)

---

## Architecture Diagram

To be provided separately as `diagram/`.

---

## Credential/Secret Strategy (Mocked)

| Use Case                   | Tool                | Key/Secret                       | Where Stored                 |
| -------------------------- | ------------------- | -------------------------------- | ---------------------------- |
| Jenkins -> Docker Hub      | Jenkins Credentials | `DOCKER_USER`, `DOCKER_PASSWORD` | Jenkins > Manage Credentials |
| Azure DevOps -> Docker Hub | Secret Variables    | `DOCKER_USER`, `DOCKER_PASSWORD` | Azure Pipeline > Library     |
| HTTPS Certs                | Traefik + ACME      | auto-generated                   | `acme.json` (600 permission) |
| Basic Auth (Traefik)       | Middleware          | `paul:$2y$...`                   | `dynamic.yml`                |

---

## Improvements with More Time

* Add automated integration testing (e.g., Postman, REST Assured)
* Use HashiCorp Vault or Azure Key Vault for secret management
* Monitor metrics with Prometheus + Grafana
* Implement Blue-Green or Canary deployments with Traefik labels
* Automate provisioning with Terraform or Bicep
* Add GitHub Actions as backup CI/CD pipeline
* Include container security scanning (e.g., Trivy or Anchore)

---

> Maintained by Oni Paul · [sirpaulx@gmail.com](mailto:sirpaulx@gmail.com) · [https://pauldevops.duckdns.org](https://pauldevops.duckdns.org)
